from Tkinter import *
import random
import time
window = Tk()
canvas = Canvas(window, width = 1200, height = 600, bg = 'white')
canvas.pack()
canvas.pack(padx = 10, pady = 10)

    # Distance moved per time step(velocity)
vx = 10.0
vy = 5.0

    # Traffic lights
tx1 = 1000
ty1 = 10
tx2 = 1050
ty2 = 60

    # Create obstacle 1 and random position for it
Ob1x1 = random.randint(50,150)
Ob1y1 = random.randint(150,350)
Ob1x2 = Ob1x1 + 100
Ob1y2 = Ob1y1 + 120
ob1 = canvas.create_rectangle(Ob1x1,Ob1y1,Ob1x2,Ob1y2, fill = 'yellow')
    # Create obstacle 2 and random position for it
Ob2x1 = random.randint(300,400)
Ob2y1 = random.randint(150,350)
Ob2x2 = Ob2x1 + 100
Ob2y2 = Ob2y1 + 140
ob2 = canvas.create_rectangle(Ob2x1,Ob2y1,Ob2x2,Ob2y2, fill = 'green')
    # Create obstacle 3:
a1 = 600
b1 = 300
a2 = 700
b2 = 400
ob3 = canvas.create_rectangle(a1,b1,a2,b2, fill = 'blue')
    # Create obstacle 4 and random position for it
Ob4x1 = random.randint(750,850)
Ob4y1 = random.randint(100,350)
Ob4x2 = Ob4x1 + 100
Ob4y2 = Ob4y1 + 160
ob4 = canvas.create_rectangle(Ob4x1,Ob4y1,Ob4x2,Ob4y2, fill = "purple")
    # Create obstacle 5 and random position for it
Ob5x1 = random.randint(950,1050)
Ob5y1 = random.randint(100,300)
Ob5x2 = Ob5x1 + 120
Ob5y2 = Ob5y1 + 140
ob5 = canvas.create_rectangle(Ob5x1,Ob5y1,Ob5x2,Ob5y2, fill = "blue")

 # Robots and objects on the screen
id1 = canvas.create_rectangle(3, 5, 3+10, 5+10, fill = 'black')
id2 = canvas.create_rectangle(3, 5, 3+10, 5+10, fill = 'black')
line1 = canvas.create_line(50,120, 1150,120)
line2 = canvas.create_line(50,480, 1150,480)

 # Robot 1 starting point
x1,y1,x2,y2=canvas.coords(id1)
canvas.coords(id1,x1,y1+250,x2,y2+250)
canvas.update()
time.sleep(0.05)

# Robot 2 starting point
x21,y21,x22,y22=canvas.coords(id2)
canvas.coords(id2,x21,y21+350,x22,y22+350)
canvas.update()
time.sleep(0.05)

    #Moving around functions
    #Robot 1
def up1():
    canvas.coords(id1,x1,y1-vy,x2,y2-vy)
    canvas.update()
    time.sleep(0.025)
    
def down1():
    canvas.coords(id1,x1,y1+vy,x2,y2+vy)
    canvas.update()
    time.sleep(0.025)
   
def left1():
    canvas.coords(id1,x1-vx,y1,x2-vx,y2)
    canvas.update()
    time.sleep(0.025)
    
def right1():
    canvas.coords(id1,x1+vx,y1,x2+vx,y2)
    canvas.update()
    time.sleep(0.025)

    # Robot 2
def up2():
    canvas.coords(id2,x21,y21-vy,x22,y22-vy)
    canvas.update()
    time.sleep(0.025)

def down2():
    canvas.coords(id2,x21,y21+vy,x22,y22+vy)
    canvas.update()
    time.sleep(0.025)

def left2():
    canvas.coords(id2,x21-vx,y21,x22-vx,y22)
    canvas.update()
    time.sleep(0.025)
    
def right2():
    canvas.coords(id2,x21+vx,y21,x22+vx,y22)
    canvas.update()
    time.sleep(0.025)

    # Traffic Lights functions
def red (a) :
    for i in range (a) :
        red = canvas.create_oval(tx1, ty1, tx2, ty2, fill = "red")
        canvas.update()
        time.sleep(0.05)

def redb (a) :
    for i in range (a) :
        red = canvas.create_oval(tx1, ty1, tx2, ty2, fill = "black")
        canvas.update()
        time.sleep(0.05)

def green (a) :
    for i in range (a) :
        green = canvas.create_oval(tx1, ty1 + 50, tx2, ty2 + 50, fill = "green")
        canvas.update()
        time.sleep(0.001)

def greenb (a) :
    for i in range (a) :
        green = canvas.create_oval(tx1, ty1 + 50, tx2, ty2 + 50, fill = "black")
        canvas.update()
        time.sleep(0.05)

def lights() :
    red = canvas.create_oval(tx1, ty1, tx2, ty2, fill = "black")
    green = canvas.create_oval(tx1, ty1 + 50, tx2, ty2 + 50, fill = "black")
    
    # Boundaries
x_min = 50
y_min = 100
x_max = 1150
y_max = 500
h1 = y2 + 250              # Half of the screen / Main path
h2 = y22 + 350
t2 = 0.0                    # Time
abc = 1
    # Random paths
path = random.randint(1,2)
b = random.randint(20, 30)

#Call functions


    # The actions
        # Case 1:
#while move == 1 or move == -1:
lights()
red(b)
redb(1)
green(b) 
if path == 1:
    for t in range(1, 800):
        t2 = t2 + 0.05
        x1,y1,x2,y2=canvas.coords(id1)
        x21,y21,x22,y22=canvas.coords(id2)                                                       # Avoiding the obstacles Path 1
        # Robot 1 
        if (x2 >= a1-10 and x2 <= a2 + 10 and y2 >= b1 + 10 and y2 <= b2 +10) \
           or (x2 >= Ob1x1-10 and x2 <= Ob1x2 + 10 and y2 >= Ob1y1 + 10 and y2 <= Ob1y2 +10) \
           or (x2 >= Ob2x1-10 and x2 <= Ob2x2 + 10 and y2 >= Ob2y1 + 10 and y2 <= Ob2y2 +10) \
           or (x2 >= Ob5x1-10 and x2 <= Ob5x2 + 10 and y2 >= Ob5y1 + 10 and y2 <= Ob5y2 +10) \
           or (x2 >= Ob4x1-10 and x2 <= Ob4x2 + 10 and y2 >= Ob4y1 + 10 and y2 <= Ob4y2 +10):  
            down1()
        elif (x2 >= a2 + 15 and y2 > h1 and x2 <= a2 + 30):                                      # Getting back on track after avoiding obstacles
            up1()
        elif (x2 >= Ob1x2 +15 and y2 > h1 and x2 <= Ob1x2 + 30): 
            up1()
        elif (x2 >= Ob5x2 +15 and y2 > h1 and x2 <= Ob5x2 + 30): 
            up1()
        elif (x2 >= Ob2x2 +15 and y2 > h1 and x2 <= Ob2x2 + 30):
            up1()
        elif (x2 >= Ob4x2 +15 and y2 > h1 and x2 <= Ob4x2 + 30):
            up1()
        else:
            right1()
        if x2 >= x_max:
            print "Robot 1 finished first in just " + str(t2) + " seconds!"
            greenb(1)
            red(1)
            break
        if (t2 >= 4.0) and (abc == 1):
            lights()
            greenb(1)
            red(b)
            redb(1)
            green(b)
            abc = abc + 1
        # Robot 2
        if (x22 >= a1-10 and x22 <= a2 + 10 and y22 >= b1  and y22 <= b2) \
           or (x22 >= Ob1x1-10 and x22 <= Ob1x2 + 10 and y22 >= Ob1y1 and y22 <= Ob1y2 ) \
           or (x22 >= Ob2x1-10 and x22 <= Ob2x2 + 10 and y22 >= Ob2y1 and y22 <= Ob2y2 ) \
           or (x22 >= Ob5x1-10 and x22 <= Ob5x2 + 10 and y22 >= Ob5y1 and y22 <= Ob5y2 ) \
           or (x22 >= Ob4x1-10 and x22 <= Ob4x2 + 10 and y22 >= Ob4y1 and y22 <= Ob4y2 ): 
            up2()
        elif (x22 >= a2 + 15 and y22 < h2 and x22 <= a2 + 30):                                      # Getting back on track after avoiding obstacles
            down2()
        elif (x22 >= Ob1x2 +15 and y22 < h2 and x22 <= Ob1x2 + 30):
            down2()
        elif (x22 >= Ob5x2 +15 and y22 < h2 and x22 <= Ob5x2 + 30):
            down2()
        elif (x22 >= Ob2x2 +15 and y22 < h2 and x22 <= Ob2x2 + 30):
            down2()
        elif (x22 >= Ob4x2 +15 and y22 < h2 and x22 <= Ob4x2 + 30):
            down2()
        else:
            right2()
        if x22 >= x_max:
            print "Robot 2 finished first in just " + str(t2) + " seconds!"
            greenb(1)
            red(1)
            break
        move = 0
        

                                            # Case 2:
elif path == 2:                                                         
    for t in range(1, 300):
        t2 = t2 + 0.05
        x1,y1,x2,y2=canvas.coords(id1)                                                           # Avoiding the obstacles Path 2
        x21,y21,x22,y22=canvas.coords(id2)
        # Robot 1
        if (x2 >= a1-10 and x2 <= a2 + 10 and y2 >= b1  and y2 <= b2) \
           or (x2 >= Ob1x1-10 and x2 <= Ob1x2 + 10 and y2 >= Ob1y1 and y2 <= Ob1y2 ) \
           or (x2 >= Ob2x1-10 and x2 <= Ob2x2 + 10 and y2 >= Ob2y1 and y2 <= Ob2y2 ) \
           or (x2 >= Ob5x1-10 and x2 <= Ob5x2 + 10 and y2 >= Ob5y1 and y2 <= Ob5y2 ) \
           or (x2 >= Ob4x1-10 and x2 <= Ob4x2 + 10 and y2 >= Ob4y1 and y2 <= Ob4y2 ): 
            up1()
        elif (x2 >= a2 + 15 and y2 < h1 and x2 <= a2 + 30):                                      # Getting back on track after avoiding obstacles
            down1()
        elif (x2 >= Ob1x2 +15 and y2 < h1 and x2 <= Ob1x2 + 30):
            down1()
        elif (x2 >= Ob2x2 +15 and y2 < h1 and x2 <= Ob2x2 + 30):
            down1()
        elif (x2 >= Ob5x2 +15 and y2 < h1 and x2 <= Ob5x2 + 30):
            down1()
        elif (x2 >= Ob4x2 +15 and y2 < h1 and x2 <= Ob4x2 + 30):
            down1()
        else:
            right1()
        if x2 >= x_max:
            print "Robot 1 finished first in just " + str(t2) + " seconds!"
            greenb(1)
            red(1)
            break
        if (t2 >= 4.0) and (abc == 1):
            lights()
            greenb(1)
            red(b)
            redb(1)
            green(b)
            abc = abc + 1
        # Robot 2
        if (x22 >= a1-10 and x22 <= a2 + 10 and y22 >= b1 + 10 and y22 <= b2 +10) \
           or (x22 >= Ob1x1-10 and x22 <= Ob1x2 + 10 and y22 >= Ob1y1 + 10 and y22 <= Ob1y2 +10) \
           or (x22 >= Ob2x1-10 and x22 <= Ob2x2 + 10 and y22 >= Ob2y1 + 10 and y22 <= Ob2y2 +10) \
           or (x22 >= Ob5x1-10 and x22 <= Ob5x2 + 10 and y22 >= Ob5y1 + 10 and y22 <= Ob5y2 +10) \
           or (x22 >= Ob4x1-10 and x22 <= Ob4x2 + 10 and y22 >= Ob4y1 + 10 and y22 <= Ob4y2 +10):  
            down2()
        elif (x22 >= a2 + 15 and y22 > h2 and x22 <= a2 + 30):                                      # Getting back on track after avoiding obstacles
            up2()
        elif (x22 >= Ob1x2 +15 and y22 > h2 and x22 <= Ob1x2 + 30): 
            up2()
        elif (x22 >= Ob5x2 +15 and y22 > h2 and x22 <= Ob5x2 + 30): 
            up2()
        elif (x22 >= Ob2x2 +15 and y22 > h2 and x22 <= Ob2x2 + 30):
            up2()
        elif (x22 >= Ob4x2 +15 and y22 > h2 and x22 <= Ob4x2 + 30):
            up2()
        else:
            right2()
        if x22 >= x_max:
            print "Robot 2 finished first in just " + str(t2) + " seconds!"
            greenb(1)
            red(1)
            break
window.mainloop()
    
